{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Development","text":""},{"location":"index.html#why-does-this-project-exist","title":"Why does this project exist?","text":"<p>This project exists to create a beginner-friendly, community-oriented, free software licensed language learning application. If you want to learn more about LibreLingo's background, I recommend reading my article.</p>"},{"location":"index.html#project-structure","title":"Project structure","text":""},{"location":"index.html#clickable-flow-chart","title":"Clickable flow chart","text":"<pre><code>graph LR\n YAML[YAML course] --&gt; LOAD\n LOAD[librelingo-yaml-loader] --&gt; EXPORT[librelingo-json-export]\n EXPORT --&gt;|JSON files| APP\n LOAD --&gt;|TODO| AUDIO\n LOAD --&gt;|TODO| IMAGE\n AUDIO[Audio files] --&gt; APP\n IMAGE[Image files] --&gt; APP\n TYPES[librelingo-types] --&gt; LOAD\n UTILS[librelingo-utils] --&gt; LOAD\n\n click APP \"https://github.com/LibreLingo/LibreLingo/tree/main/apps/web\"\n click EXPORT \"https://pypi.org/project/librelingo-json-export/\"\n click UTILS \"https://pypi.org/project/librelingo-utils/\"\n click TYPES \"https://pypi.org/project/librelingo-types/\"\n click IMAGE \"https://github.com/LibreLingo/LibreLingo/tree/main/apps/web/static/images\"\n click AUDIO \"https://github.com/LibreLingo/LibreLingo/tree/main/apps/web/static/voice\"\n click LOAD \"https://pypi.org/project/librelingo-yaml-loader/\"\n click YAML \"https://github.com/LibreLingo/LibreLingo/tree/main/courses\"\n</code></pre>"},{"location":"index.html#setting-up-the-development-environment","title":"Setting up the development environment","text":""},{"location":"index.html#prerequisites","title":"Prerequisites","text":"<p>In order to install the dependencies of this project, you will need to have some basic development tools installed.</p>"},{"location":"index.html#ubuntu","title":"Ubuntu","text":"<p>If you are on Ubuntu, run this command in order to make sure you have all the basic dependencies:</p> <pre><code>apt-get install curl git python3-venv libpython3-dev wget unzip gcc libyaml-dev npm\n</code></pre> <p>On Ubuntu, it is also recommended to use Python 3.x as your default Python version:</p> <pre><code>apt-get install python-is-python3\n</code></pre>"},{"location":"index.html#obtaining-the-source-code","title":"Obtaining the source code","text":"<p>Clone the repository:</p> <pre><code>git clone git@github.com:LibreLingo/LibreLingo.git\n</code></pre> <p>Move into the repo directory:</p> <pre><code>cd LibreLingo\n</code></pre>"},{"location":"index.html#web-app","title":"Web app","text":""},{"location":"index.html#having-the-correct-version-of-node","title":"Having the correct version of Node","text":"<p>You will need Node. Note that this project is not yet compatible with Node v16.</p> <p>In order to make sure you have the correct <code>node</code> version, it's recommended to use <code>nvm</code>. To install <code>nvm</code>, please consult nvm's official documentation, but if you already have the correct version, you might not strictly need it.</p> <p>First, install the correct <code>node</code> version with this command:</p> <pre><code>nvm install 14\n</code></pre> <p>Then, to choose this version of <code>node</code> in your terminal, use</p> <pre><code>nvm use 14\n</code></pre>"},{"location":"index.html#install-dependencies","title":"Install dependencies:","text":"<p>Yarn is a package manager for JavaScript that helps manage project dependencies, ensuring consistent and efficient installations. For more information about Yarn, please refer to the official documentation. The steps required to install yarn itself are documented here.</p> <pre><code>yarn install\n</code></pre>"},{"location":"index.html#starting-the-development-server","title":"Starting the development server","text":"<p>Start the development server:</p> <pre><code>yarn web dev\n</code></pre> <p>Now you should be able to see your app on http://localhost:3000/</p>"},{"location":"index.html#setting-up-the-development-environment-for-python","title":"Setting up the development environment for Python","text":"<p>If you want to test new features in the YAML format, or some changes in how they are being used in the frontend, you need to be able to export YAML courses locally.</p>"},{"location":"index.html#install-poetry","title":"Install Poetry","text":"<p>You will need Poetry. If you don't have Poetry, you can install it with</p> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <p>For more information, check out Poetry's official documentation.</p>"},{"location":"index.html#install-dependencies-using-poetry","title":"Install dependencies using Poetry","text":"<p>Install dependencies at the top level and for the apps:</p> <pre><code>poetry install\n\ncd apps/librelingo_yaml_loader\npoetry install\ncd ../..\n\ncd apps/librelingo_json_export\npoetry install\ncd ../..\n</code></pre>"},{"location":"index.html#handling-outdated-local-dependencies","title":"Handling Outdated Local Dependencies","text":"<p>When you update your local repository by pulling remote changes, your local dependencies might become outdated. To ensure your local dependencies are in sync with the project requirements, follow these brief steps:</p>"},{"location":"index.html#updating-javascript-dependencies-with-yarn","title":"Updating JavaScript Dependencies with Yarn","text":"<p>Update your local dependencies:</p> <pre><code>yarn install\n</code></pre> <p>This command ensures your local dependencies match the project's package.json file. For more information, refer to the Yarn documentation.</p>"},{"location":"index.html#updating-python-dependencies-with-poetry","title":"Updating Python Dependencies with Poetry","text":"<p>Update your local dependencies:</p> <pre><code>poetry install\n</code></pre> <p>This command ensures your local dependencies match the project's pyproject.toml and poetry.lock files. For more information, refer to the Poetry documentation.</p>"},{"location":"index.html#locally-test-librelingo-with-real-courses","title":"Locally test LibreLingo with real courses","text":"<p>In order to test LiberLingo with real courses just like in the deployed production version, you need to install courses locally and export them from YAML to JSON.</p>"},{"location":"index.html#install-courses","title":"Install courses","text":"<p>The following command installs all courses listed in the courses.json file just like in production. Keep in mind that in order to use them in the frontend, the courses also need to be exported!</p> <pre><code>yarn web run installAllExternalCourses\n</code></pre>"},{"location":"index.html#export-courses","title":"Export courses","text":"<p>In order to use a locally installed course when locally testing the frontend, you should export the course first. You should also export the course every time you make local changes to this course and you want the changes to be visible in the frontend.</p> <p>Use the following command:</p> <pre><code>yarn exportAllCourses\n</code></pre> <p>You can export a single course using the following command (change the name of the course for the one that you need to export):</p> <pre><code>yarn run exportCourse spanish-from-english\n</code></pre>"},{"location":"index.html#setting-up-semaphore-ci-in-a-clone","title":"Setting up Semaphore CI in a clone","text":"<p>In order for Semaphore CI to correctly operate, you will need to set up certain secrets.</p> <p>This might not be necessary for you in all cases, but it cannot be avoided if you want to fully fork the repo, or work on CI configuration related tasks.</p> <p>Consult this page to read about setting up secrets in Semaphore CI.</p> <p>Here's a list of the tokens you need to set up. Each of them is a link to a page explaining how to obtain the token:</p> <ul> <li>GH_TOKEN</li> <li>KNAPSACK_PRO_TEST_SUITE_TOKEN_CYPRESS</li> <li>PERCY_TOKEN</li> </ul>"},{"location":"index.html#testing-courses-using-github-gists","title":"Testing courses using GitHub gists","text":"<p>It's possible to test courses without them as HTML and deploying them.</p> <p>One way of doing that is using GitHub gists. You can create a GitHub gist with the course JSON files.</p> <p>The first step is to export the course as JSON. Then, you have to create a GitHub gist with the course files.</p> <p>Keep in mind, that you have to prefix all file names with <code>librelingo___</code> and therefore The first step is to export the course as JSON. Then, you have to create a GitHub gist with the course files.</p> <p>Keep in mind, that you have to prefix all file names with <code>librelingo___</code> and replace <code>/</code> with <code>___</code> in your paths, as GitHub gists don't natively support uploading folders.</p> <p>So, for example <code>challenges/animals.json</code> should be uploaded as the GitHub gist file <code>librelingo___challenges___animals.json</code>.</p>"},{"location":"index.html#mocks","title":"Mocks","text":"<p>For mocks in the frontend, LibreLingo uses MSW. For Cypress tests, <code>cy.intercept()</code> is used. All of these mocks are defined in apps/web/src/mocks/handlers.js.</p>"},{"location":"CODE_OF_CONDUCT.html","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT.html#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT.html#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT.html#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT.html#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT.html#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at github@daniel-kantor.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"CODE_OF_CONDUCT.html#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"CONTRIBUTING.html","title":"Contributing","text":"<p>This project has 2 main components</p> <ul> <li>Frontend, implemented using Svelte and TypeScript</li> <li>A set of Python packages that provide tooling for course creation</li> <li>~Course editor, implemented using Django~ We don't have a Django based course editor anymore</li> </ul> <p>The site is statically built and hosted on GitHub pages, therefore there's no real \"backend\" or API.</p>"},{"location":"CONTRIBUTING.html#getting-started","title":"Getting started","text":"<p>Please check out our development documentation for instructions on setting up the development environment.</p>"},{"location":"CONTRIBUTING.html#pick-an-issue","title":"Pick an issue","text":"<p>Here are some tips:</p> <ul> <li>Good first issues</li> <li>Isssues that require some extra attention</li> </ul>"},{"location":"LICENSE.html","title":"GNU Affero General Public License","text":"<p>Version 3, 19 November 2007 Copyright \u00a9 2007 Free Software Foundation, Inc. &lt;http://fsf.org/&gt;</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"LICENSE.html#preamble","title":"Preamble","text":"<p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users' freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"LICENSE.html#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"LICENSE.html#0-definitions","title":"0. Definitions","text":"<p>\u201cThis License\u201d refers to version 3 of the GNU Affero General Public License.</p> <p>\u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations.</p> <p>To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work.</p> <p>A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program.</p> <p>To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"LICENSE.html#1-source-code","title":"1. Source Code","text":"<p>The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work.</p> <p>A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"LICENSE.html#2-basic-permissions","title":"2. Basic Permissions","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"LICENSE.html#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"LICENSE.html#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"LICENSE.html#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified   it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is   released under this License and any conditions added under section 7.   This requirement modifies the requirement in section 4 to   \u201ckeep intact all notices\u201d.</li> <li>c) You must license the entire work, as a whole, under this   License to anyone who comes into possession of a copy. This   License will therefore apply, along with any applicable section 7   additional terms, to the whole of the work, and all its parts,   regardless of how they are packaged. This License gives no   permission to license the work in any other way, but it does not   invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display   Appropriate Legal Notices; however, if the Program has interactive   interfaces that do not display Appropriate Legal Notices, your   work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"LICENSE.html#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by the   Corresponding Source fixed on a durable physical medium   customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by a   written offer, valid for at least three years and valid for as   long as you offer spare parts or customer support for that product   model, to give anyone who possesses the object code either (1) a   copy of the Corresponding Source for all the software in the   product that is covered by this License, on a durable physical   medium customarily used for software interchange, for a price no   more than your reasonable cost of physically performing this   conveying of source, or (2) access to copy the   Corresponding Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the   written offer to provide the Corresponding Source. This   alternative is allowed only occasionally and noncommercially, and   only if you received the object code with such an offer, in accord   with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated   place (gratis or for a charge), and offer equivalent access to the   Corresponding Source in the same way through the same place at no   further charge. You need not require recipients to copy the   Corresponding Source along with the object code. If the place to   copy the object code is a network server, the Corresponding Source   may be on a different server (operated by you or a third party)   that supports equivalent copying facilities, provided you maintain   clear directions next to the object code saying where to find the   Corresponding Source. Regardless of what server hosts the   Corresponding Source, you remain obligated to ensure that it is   available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission, provided   you inform other peers where the object code and Corresponding   Source of the work are being offered to the general public at no   charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"LICENSE.html#7-additional-terms","title":"7. Additional Terms","text":"<p>\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the   terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or   author attributions in that material or in the Appropriate Legal   Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material, or   requiring that modified versions of such material be marked in   reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors or   authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some   trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that   material by anyone who conveys the material (or modified versions of   it) with contractual assumptions of liability to the recipient, for   any liability that these contractual assumptions directly impose on   those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"LICENSE.html#8-termination","title":"8. Termination","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"LICENSE.html#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"LICENSE.html#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"LICENSE.html#11-patents","title":"11. Patents","text":"<p>A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \u201ccontributor version\u201d.</p> <p>A contributor's \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"LICENSE.html#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"LICENSE.html#13-remote-network-interaction-use-with-the-gnu-general-public-license","title":"13. Remote Network Interaction; Use with the GNU General Public License","text":"<p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>"},{"location":"LICENSE.html#14-revised-versions-of-this-license","title":"14. Revised Versions of this License","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"LICENSE.html#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"LICENSE.html#16-limitation-of-liability","title":"16. Limitation of Liability","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"LICENSE.html#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"LICENSE.html#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \u201cSource\u201d link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see &lt;http://www.gnu.org/licenses/&gt;.</p>"},{"location":"attributions.html","title":"Media attributions","text":""},{"location":"attributions.html#correct-answer-sound","title":"Correct answer sound","text":"<p>https://freesound.org/people/ertfelda/sounds/243701/</p>"},{"location":"attributions.html#wrong-answer-sound","title":"Wrong answer sound","text":"<p>https://freesound.org/people/Autistic%20Lucario/sounds/142608/</p>"},{"location":"creating_a_python_language_learning_app_using_librelingo_courses.html","title":"Create your own language learning app using Python and LibreLingo (TDD)","text":"<p>In this tutorial, you'll learn how to use LibreLingo course data to create language-learning apps in Python.</p> <p>We'll build a simple function that lists the audio files required by a LibreLingo course. (Whether they exist or not yet)</p> <p>LibreLingo comes with some tools that make building and testing such programs easier. I structured the tutorial as a small Test-Driven-Development session so that you'll see how to use these tools.</p> <p>By the end of the tutorial, you should have a good basis to build your own apps, APIs, or software using LibreLingo, or to contribute to LibreLingo or existing LibreLingo-based software.</p>"},{"location":"creating_a_python_language_learning_app_using_librelingo_courses.html#requirements","title":"Requirements","text":"<p>To enjoy this tutorial, you'll need to have some experience with Python, and you also need to have Python 3.9 installed on your system, as well as the poetry dependency management tool.</p>"},{"location":"creating_a_python_language_learning_app_using_librelingo_courses.html#setting-up-your-project","title":"Setting up your project","text":"<p>To set up our project, we're first going to create an empty folder.</p> <p>If you are creating your app inside the LibreLingo monorepo, that's how you'd do it:</p> <pre><code>cd apps/\nmkdir librelingo_audios\ncd librelingo_audios/\n</code></pre> <p>Let's initialize our project using <code>poetry</code>:</p> <pre><code>poetry init\n</code></pre> <p>If you want to learn more about <code>poetry</code>, you can check out their documentation on initializing your project.</p> <p>Let's create the basic folder structure of our project:</p> <pre><code>mkdir librelingo_audios\nmkdir tests\ntouch librelingo_audios/__init__.py\n</code></pre> <p>We want to test our app, so we need to install <code>pytest</code> as a development dependency of our project:</p> <pre><code>poetry add --dev pytest\n</code></pre> <p>Let's see if <code>pytest</code> works:</p> <pre><code>poetry run pytest\n</code></pre> <p>The output is:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\ncollected 0 items\n\n=================================== no tests ran in 0.00s ====================================\n</code></pre> <p>Looks like <code>pytest</code> works and we can start writing our tests!</p> <p>Let's create <code>tests/test_list_missing_audios.py</code> with this simple test case:</p> <pre><code>from librelingo_audios import list_missing_audios\n\ndef test_returns_hello_world():\n    assert list_missing_audios() == \"Hello World\"\n</code></pre> <p>Let's try running this test:</p> <pre><code>poetry run pytest\n</code></pre> <p>We get this error:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo\nplugins: pyfakefs-4.4.0, mock-3.5.1, snapshottest-0.6.0\ncollected 178 items / 1 error / 177 selected\n\n=========================================== ERRORS ===========================================\n_________ ERROR collecting apps/librelingo_audios/tests/test_list_missing_audios.py __________\nImportError while importing test module '/home/kdani/repos/LibreLingo/apps/librelingo_audios/tests/test_list_missing_audios.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/usr/lib/python3.9/importlib/__init__.py:127: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\napps/librelingo_audios/tests/test_list_missing_audios.py:1: in &lt;module&gt;\n    from librelingo_audios import list_missing_audios\nE   ModuleNotFoundError: No module named 'librelingo_audios'\n================================== short test summary info ===================================\nERROR apps/librelingo_audios/tests/test_list_missing_audios.py\n!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!\n====================================== 1 error in 0.88s ======================================\n</code></pre> <p>Makes sense, because we haven't created our implementation yet!</p> <p>Let's create <code>librelingo_audios/list_missing_audios.py</code> with the following content:</p> <pre><code>def list_missing_audios():\n    return \"Hello World\"\n</code></pre> <p>We need to be able to import that in our test, so let's create <code>librelingo_audios/__init__.py</code>:</p> <pre><code>__version__ = '0.1.0'\n\nfrom librelingo_audios.list_missing_audios import list_missing_audios\n</code></pre> <p>If you did that, this is how your directory structure should look like now:</p> <pre><code>\u251c\u2500\u2500 librelingo_audios\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 list_missing_audios.py\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 tests\n    \u2514\u2500\u2500 test_list_missing_audios.py\n</code></pre> <p>Let's try running our tests again:</p> <pre><code>poetry run pytest\n</code></pre> <p>You'll get the following output:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\ncollected 1 item\n\ntests/test_list_missing_audios.py .                                                    [100%]\n\n===================================== 1 passed in 0.01s ======================================\n</code></pre>"},{"location":"creating_a_python_language_learning_app_using_librelingo_courses.html#loading-librelingo-courses","title":"Loading LibreLingo courses","text":"<p>LibreLingo comes with a Python package that facilitates loading courses in Python programs. Let's install it:</p> <pre><code>poetry add librelingo_yaml_loader\n</code></pre> <p>Let's play around with this library in <code>ipython</code> to see how it works:</p> <pre><code>poetry run ipython\n</code></pre> <pre><code>In [1]: import librelingo_yaml_loader\nIn [2]: course = librelingo_yaml_loader.load_course('../../courses/spanish-from-english/')\n</code></pre> <p>We've loaded our course into the variable <code>course</code>. Now you should be able to access course data.</p> <p>For example, we can see what the target language of the course is:</p> <pre><code>In [3]: course.target_language.name\nOut[3]: 'Spanish'\n</code></pre> <p>We can see what the title of the first Module is:</p> <pre><code>In [4]: course.modules[0].title\nOut[4]: 'Basics'\n</code></pre> <p>We can list the Phrase objects included in the second Skill of the first Module like so:</p> <pre><code>In [6]: course.modules[0].skills[1].phrases\nOut[6]:\n[Phrase(in_target_language=['Buen provecho'], in_source_language=['Enjoy your meal']),\n Phrase(in_target_language=['Por favor'], in_source_language=['Please']),\n Phrase(in_target_language=['Pan, por favor'], in_source_language=['Bread, please']),\n Phrase(in_target_language=['Agua, por favor'], in_source_language=['Water, please']),\n Phrase(in_target_language=['Cecilia bebe agua'], in_source_language=['Cecilia drinks water']),\n Phrase(in_target_language=['La pareja bebe cerveza'], in_source_language=['The couple drinks beer']),\n Phrase(in_target_language=['Jos\u00e9 come pan'], in_source_language=['Jos\u00e9 eats bread']),\n Phrase(in_target_language=['Yo como pasta'], in_source_language=['I eat pasta'])]\n</code></pre>"},{"location":"creating_a_python_language_learning_app_using_librelingo_courses.html#adding-some-tests","title":"Adding some tests","text":"<p>We'll need some data to write our tests. We could use real data here, but that would have some disadvantages:</p> <ul> <li>Real courses evolve over time, so they might break our tests in the future</li> <li>A real course can be difficult to navigate due to its size</li> <li>A real course can take up a lot of memory</li> <li>Loading real courses could slow our tests down</li> </ul> <p>Thankfully, LibreLingo comes with a library with fake data to simplify writing tests! Let's install it:</p> <pre><code>poetry add --dev librelingo-fakes\n</code></pre> <p>Let's remove our existing test:</p> <pre><code>\ndef test_returns_hello_world():\n    assert list_missing_audios() == \"Hello World\"\n</code></pre> <p>And replace it with a real test that verifies that an empty course doesn't need any audio files:</p> <pre><code>from librelingo_fakes import fakes\n\nfrom librelingo_audios.list_missing_audios import list_missing_audios\n\n\ndef test_an_empty_course_does_not_have_any_audios():\n    assert list(list_missing_audios(fakes.courseEmpty)) == []\n</code></pre> <p>If we run our tests again, we see the following failure:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, snapshottest-0.6.0\ncollected 1 item\n\ntests/test_list_missing_audios.py F                                                    [100%]\n\n========================================== FAILURES ==========================================\n_______________________ test_an_empty_course_does_not_have_any_audios ________________________\n\n    def test_an_empty_course_does_not_have_any_audios():\n&gt;       assert list(list_missing_audios(fakes.courseEmpty)) == []\nE       TypeError: list_missing_audios() takes 0 positional arguments but 1 was given\n\ntests/test_list_missing_audios.py:7: TypeError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_an_empty_course_does_not_have_any_audios - T...\n===================================== 1 failed in 0.03s ======================================\n\n</code></pre> <p>Let's cheat a little bit to make that test pass:</p> <pre><code>def list_missing_audios(course):\n    return []\n</code></pre> <p>This shows us that our \"implementation\" already works for empty courses, but that's a rather unrealistic edge-case. So we need to come up with some more precise test cases to force ourselves to write the correct implementation.</p> <p>Let's look at the first fake course. By running this code, we figure out that this course has <code>2</code> phrases in total:</p> <pre><code>In [41]: count = 0\n\nIn [42]: for module in fakes.course1.modules:\n    ...:     for skill in module.skills:\n    ...:         count += len(skill.phrases)\n    ...:\n\nIn [43]: count\nOut[43]: 2\n</code></pre> <p>Every phrase has one corresponding audio, so this means our fake course is going to need 2 audios.</p> <p>We expect our function to return 2 items:</p> <pre><code>def test_a_course_with_2_phrases_needs_2_audios():\n    assert len(list(list_missing_audios(fakes.course1))) == 2\n</code></pre> <p>Let's cheat again to make that test pass:</p> <pre><code>def list_missing_audios(course):\n    if not course.modules:\n        return []\n\n    return [\"foo\", 42]\n</code></pre> <p>By further exploration, we learn that the second fake course doesn't have any phrases:</p> <pre><code>In [41]: count = 0\n\nIn [42]: for module in fakes.course2.modules:\n    ...:     for skill in module.skills:\n    ...:         count += len(skill.phrases)\n    ...:\n\nIn [43]: count\nOut[43]: 0\n</code></pre> <p>Let's change the test for the empty course to use course2 instead:</p> <pre><code>def test_a_course_with_0_phrases_needs_zero_audios():\n    assert len(list(list_missing_audios(fakes.course2))) == 0\n</code></pre> <p>Our tests are failing again:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, snapshottest-0.6.0\ncollected 2 items\n\ntests/test_list_missing_audios.py F.                                                   [100%]\n\n========================================== FAILURES ==========================================\n_______________________ test_a_course_with_0_phrases_needs_zero_audios _______________________\n\n    def test_a_course_with_0_phrases_needs_zero_audios():\n&gt;       assert len(list(list_missing_audios(fakes.course2))) == 0\nE       AssertionError: assert 2 == 0\nE        +  where 2 = len(['foo', 42])\nE        +    where ['foo', 42] = list(['foo', 42])\nE        +      where ['foo', 42] = list_missing_audios(Course(target_language=Language(name='another language', code='tr'), source_language=Language(name='my language', code...fruit', is_in_target_language=True), DictionaryItem(word='ipsum', definition='red fruit', is_in_target_language=True)]))\nE        +        where Course(target_language=Language(name='another language', code='tr'), source_language=Language(name='my language', code...fruit', is_in_target_language=True), DictionaryItem(word='ipsum', definition='red fruit', is_in_target_language=True)]) = fakes.course2\n\ntests/test_list_missing_audios.py:7: AssertionError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_a_course_with_0_phrases_needs_zero_audios - ...\n================================ 1 failed, 1 passed in 0.03s =================================\n</code></pre> <p>Since <code>course2</code> has modules (all with no phrases) this time, it's not as easy to cheat with the implementation.</p> <p>The simplest way to make the test pass is probably actually implementing the iteration:</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                yield None\n</code></pre> <p>Our tests are now passing!</p> <p>One problem is that although now every phrase is there, the output format is still useless.</p> <p>We need to include the text of each phrase in the course's target language. Let's make sure it's always the second item in the output:</p> <pre><code>def test_result_includes_the_phrase_in_the_target_language():\n    result = list(list_missing_audios(fakes.course1))\n    # We are using in_target_language[0] because only the first version is used for audios\n    assert result[0][1] == fakes.course1.modules[0].skills[0].phrases[0].in_target_language[0]\n\n</code></pre> <p>Let's run our tests again:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, snapshottest-0.6.0\ncollected 3 items\n\ntests/test_list_missing_audios.py ..F                                                  [100%]\n\n========================================== FAILURES ==========================================\n___________________ test_result_includes_the_phrase_in_the_target_language ___________________\n\n    def test_result_includes_the_phrase_in_the_target_language():\n        result = list(list_missing_audios(fakes.course1))\n&gt;       assert result[0][1] == fakes.course1.modules[0].skills[0].phrases[0].in_target_language\nE       TypeError: 'NoneType' object is not subscriptable\n\ntests/test_list_missing_audios.py:16: TypeError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_result_includes_the_phrase_in_the_target_language\n================================ 1 failed, 2 passed in 0.03s =================================\n</code></pre> <p>Let's try cheating with the implementation:</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                yield [None, \"\"]\n</code></pre> <p>Now we get this error:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, snapshottest-0.6.0\ncollected 3 items\n\ntests/test_list_missing_audios.py ..F                                                  [100%]\n\n========================================== FAILURES ==========================================\n___________________ test_result_includes_the_phrase_in_the_target_language ___________________\n\n    def test_result_includes_the_phrase_in_the_target_language():\n        result = list(list_missing_audios(fakes.course1))\n&gt;       assert result[0][1] == fakes.course1.modules[0].skills[0].phrases[0].in_target_language\nE       AssertionError: assert '' == ['lorem ipsum']\nE        +  where ['lorem ipsum'] = Phrase(in_target_language=['lorem ipsum'], in_source_language=['john smith']).in_target_language\n\ntests/test_list_missing_audios.py:16: AssertionError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_result_includes_the_phrase_in_the_target_language\n================================ 1 failed, 2 passed in 0.03s =================================\n</code></pre> <p>We can continue cheating, though:</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                yield [None, \"lorem ipsum\"]\n</code></pre> <p>Our tests are now passing again \ud83c\udf89!</p> <p>This shows that our test wasn't specific enough. Let's add another example:</p> <pre><code>def test_result_includes_the_phrase_in_the_target_language_2():\n    result = list(list_missing_audios(fakes.course1))\n    assert result[1][1] == fakes.course1.modules[0].skills[1].phrases[0].in_target_language[0]\n\n</code></pre> <p>We get the following failure:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, snapshottest-0.6.0\ncollected 4 items\n\ntests/test_list_missing_audios.py ...F                                                 [100%]\n\n========================================== FAILURES ==========================================\n__________________ test_result_includes_the_phrase_in_the_target_language_2 __________________\n\n    def test_result_includes_the_phrase_in_the_target_language_2():\n        result = list(list_missing_audios(fakes.course1))\n&gt;       assert result[1][1] == fakes.course1.modules[0].skills[1].phrases[0].in_target_language[0]\nE       AssertionError: assert 'lorem ipsum' == 'foous barus'\nE         - foous barus\nE         + lorem ipsum\n\ntests/test_list_missing_audios.py:21: AssertionError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_result_includes_the_phrase_in_the_target_language_2\n================================ 1 failed, 3 passed in 0.03s =================================\n</code></pre> <p>This time around, writing the actual implementation is easier than trying to trick the tests:</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                # Returning only the first version because\n                # the other versions never need audio.\n                yield [None, phrase.in_target_language[0]]\n</code></pre> <p>Let's refactor a bit: we extract the text to a new variable!</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                # Returning only the first version because\n                # the other versions never need audio.\n                text = phrase.in_target_language[0]\n                yield [None, text]\n</code></pre> <p>The reason anyone would call the function <code>list_missing_audios</code> is probably because they want to download/create those audios somehow.</p> <p>If they want to create those files, then for practical reasons, the filenames should follow a standardized system that other LibreLingo-related software can also recognize.</p> <p>To achieve that, we can use the <code>audio_id</code> function from librelingo-utils.</p> <p>Let's start simple. First, let's make sure that the IDs are string:</p> <pre><code>def test_audio_id_is_a_string():\n    assert [type(result[0]) for result in list_missing_audios(fakes.course1)] == [str, str]\n</code></pre> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, snapshottest-0.6.0\ncollected 5 items\n\ntests/test_list_missing_audios.py ....F                                                [100%]\n\n========================================== FAILURES ==========================================\n_________________________________ test_audio_id_is_a_string __________________________________\n\n    def test_audio_id_is_a_string():\n&gt;       assert [type(result[0]) for result in list_missing_audios(fakes.course1)] == [str, str]\nE       AssertionError: assert [&lt;class 'None...s 'NoneType'&gt;] == [&lt;class 'str'&gt;, &lt;class 'str'&gt;]\nE         At index 0 diff: &lt;class 'NoneType'&gt; != &lt;class 'str'&gt;\nE         Use -v to get the full diff\n\ntests/test_list_missing_audios.py:24: AssertionError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_audio_id_is_a_string - AssertionError: asser...\n================================ 1 failed, 4 passed in 0.04s =================================\n</code></pre> <p>We can still cheat by returning an empty string:</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                # Returning only the first version because\n                # the other versions never need audio.\n                text = phrase.in_target_language[0]\n                yield [\"\", text]\n</code></pre> <p>And out tests are passing again... We better make sure somehow that <code>audio_id</code> is actually used to perform the filename logic.</p> <p>First, let's install <code>librelingo-utils</code>:</p> <pre><code>poetry add librelingo-utils\n</code></pre> <p>And write a test that only passes if our function calls <code>audio_id</code>.</p> <p>To do that, we'll need to install <code>pytest-mock</code>:</p> <pre><code>poetry add --dev pytest-mock\n</code></pre> <p>We can now write our test:</p> <pre><code>def test_calls_audio_id_to_get_the_id(mocker):\n    audio_id = mocker.patch('librelingo_audios.list_missing_audios.audio_id')\n    list_missing_audios(fakes.course1)\n    assert audio_id.call_count == 2\n\n</code></pre> <p>This will mock the <code>audio_id</code> function and see how many times it has been called. We assert that it has to run twice since there are 2 phrases that need audio files.</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, mock-3.5.1, snapshottest-0.6.0\ncollected 6 items\n\ntests/test_list_missing_audios.py .....F                                               [100%]\n\n========================================== FAILURES ==========================================\n_____________________________ test_calls_audio_id_to_get_the_id ______________________________\n\nmocker = &lt;pytest_mock.plugin.MockerFixture object at 0x7ff94ee398e0&gt;\n\n    def test_calls_audio_id_to_get_the_id(mocker):\n&gt;       audio_id = mocker.patch('librelingo_audios.list_missing_audios.audio_id')\n\ntests/test_list_missing_audios.py:29:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/home/kdani/.cache/pypoetry/virtualenvs/librelingo-audios-yD2wurwN-py3.9/lib/python3.9/site-packages/pytest_mock/plugin.py:352: in __call__\n    return self._start_patch(\n/home/kdani/.cache/pypoetry/virtualenvs/librelingo-audios-yD2wurwN-py3.9/lib/python3.9/site-packages/pytest_mock/plugin.py:161: in _start_patch\n    mocked = p.start()  # type: unittest.mock.MagicMock\n/usr/lib/python3.9/unittest/mock.py:1541: in start\n    result = self.__enter__()\n/usr/lib/python3.9/unittest/mock.py:1405: in __enter__\n    original, local = self.get_original()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = &lt;unittest.mock._patch object at 0x7ff94ee39a00&gt;\n\n    def get_original(self):\n        target = self.getter()\n        name = self.attribute\n\n        original = DEFAULT\n        local = False\n\n        try:\n            original = target.__dict__[name]\n        except (AttributeError, KeyError):\n            original = getattr(target, name, DEFAULT)\n        else:\n            local = True\n\n        if name in _builtins and isinstance(target, ModuleType):\n            self.create = True\n\n        if not self.create and original is DEFAULT:\n&gt;           raise AttributeError(\n                \"%s does not have the attribute %r\" % (target, name)\n            )\nE           AttributeError: &lt;function list_missing_audios at 0x7ff94ee4c5e0&gt; does not have the attribute 'audio_id'\n\n/usr/lib/python3.9/unittest/mock.py:1378: AttributeError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_calls_audio_id_to_get_the_id - AttributeErro...\n================================ 1 failed, 5 passed in 0.13s =================================\n</code></pre> <p>That's not exactly what I expected. Looks like mocking is problematic in Python when your file name is the same as a function name, because it will try to mock an attribute of the function instead of the file.</p> <p>After some Googling, I couldn't find an easy and clean solution for this, so let's just rename <code>list_missing_audios.py</code> to <code>functions.py</code> to avoid trouble.</p> <p>I'm planning to put more functions here anyway.</p> <p>In our test file, let's change the import:</p> <pre><code>from librelingo_audios.functions import list_missing_audios\n</code></pre> <p>Let's change the mock:</p> <pre><code>def test_calls_audio_id_to_get_the_id(mocker):\n    audio_id = mocker.patch('librelingo_audios.functions.audio_id')\n    list_missing_audios(fakes.course1)\n    assert audio_id.call_count == 2\n</code></pre> <p>Let's also change the import in <code>__init__.py</code>:</p> <pre><code>__version__ = '0.1.0'\n\nfrom librelingo_audios.functions import list_missing_audios\n</code></pre> <p>Now, if we run our tests, we see the failure that I originally expected, or at least something similar:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, mock-3.5.1, snapshottest-0.6.0\ncollected 6 items\n\ntests/test_list_missing_audios.py .....F                                               [100%]\n\n========================================== FAILURES ==========================================\n_____________________________ test_calls_audio_id_to_get_the_id ______________________________\n\nmocker = &lt;pytest_mock.plugin.MockerFixture object at 0x7f458c9cc8e0&gt;\n\n    def test_calls_audio_id_to_get_the_id(mocker):\n        audio_id = mocker.patch('librelingo_audios.functions.audio_id')\n        list_missing_audios(fakes.course1)\n&gt;       assert audio_id.call_count == 2\nE       AssertionError: assert 0 == 2\nE        +  where 0 = &lt;MagicMock name='audio_id' id='139936688556448'&gt;.call_count\n\ntests/test_list_missing_audios.py:31: AssertionError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_calls_audio_id_to_get_the_id - AssertionErro...\n================================ 1 failed, 5 passed in 0.04s =================================\n</code></pre> <p>Whoops, our test forgot to actually iterate over the result; let's wrap the function call in <code>list()</code> to fix that.</p> <pre><code>def test_calls_audio_id_to_get_the_id(mocker):\n    audio_id = mocker.patch('librelingo_audios.functions.audio_id')\n    list(list_missing_audios(fakes.course1))\n    assert audio_id.call_count == 2\n</code></pre> <p>Now let's change the implementation so that it actually calls <code>audio_id</code>:</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                # Returning only the first version because\n                # the other versions never need audio.\n                text = phrase.in_target_language[0]\n                audio_id(course.source_language, \"lorem ipsum\")\n                yield [\"\", text]\n</code></pre> <p>Our tests are now passing:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, mock-3.5.1, snapshottest-0.6.0\ncollected 6 items\n\ntests/test_list_missing_audios.py ......                                               [100%]\n\n===================================== 6 passed in 0.02s ======================================\n</code></pre> <p>Notice, though, that we are actually passing the source language instead of the target language! Also, we're calling it with an empty string instead of the actual string:</p> <pre><code>audio_id(course.source_language, \"\")\n</code></pre> <p>We need to be a lot stricter in our tests, so let's fix that:</p> <pre><code>def test_calls_audio_id_with_the_correct_arguments(mocker):\n    audio_id = mocker.patch('librelingo_audios.functions.audio_id')\n    list(list_missing_audios(fakes.course1))\n    expected_call = mocker.call(fakes.course1.target_language, fakes.course1.modules[0].skills[0].phrases[0].in_target_language[0])\n    audio_id.assert_has_calls([expected_call])\n</code></pre> <p>That causes our tests to fail so let's update the implementation:</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                # Returning only the first version because\n                # the other versions never need audio.\n                text = phrase.in_target_language[0]\n                audio_id(course.target_language, \"lorem ipsum\")\n                yield [\"\", text]\n</code></pre> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, mock-3.5.1, snapshottest-0.6.0\ncollected 7 items\n\ntests/test_list_missing_audios.py .......                                              [100%]\n\n===================================== 7 passed in 0.03s ======================================\n</code></pre> <p>But you'll notice this is still cheating because we're always using <code>\"lorem ipsum\"</code> as the text. Let's extend our test case to fix that.</p> <pre><code>def test_calls_audio_id_with_the_correct_arguments(mocker):\n    audio_id = mocker.patch('librelingo_audios.functions.audio_id')\n    list(list_missing_audios(fakes.course1))\n    expected_call_1 = mocker.call(fakes.course1.target_language, fakes.course1.modules[0].skills[0].phrases[0].in_target_language[0])\n    expected_call_2 = mocker.call(fakes.course1.target_language, fakes.course1.modules[0].skills[1].phrases[0].in_target_language[0])\n    audio_id.assert_has_calls([expected_call_1, expected_call_2])\n</code></pre> <p>Yup, our tests are failing again!</p> <p>Let's make them pass:</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                # Returning only the first version because\n                # the other versions never need audio.\n                text = phrase.in_target_language[0]\n                audio_id(course.target_language, phrase.in_target_language[0])\n                yield [\"\", text]\n</code></pre> <p>This looks good, but we're still not returning the ID! You guessed it, that's a new test case for us!</p> <p>We will make our mock function return a fake value and assert that the value shows up in the result.</p> <pre><code>def test_returns_correct_audio_id(mocker):\n    audio_id = mocker.patch('librelingo_audios.functions.audio_id')\n    audio_id.return_value = \"omg\"\n    assert list(list_missing_audios(fakes.course1))[0][0] == \"omg\"\n</code></pre> <p>If we run the tests, we get the error that we expected:</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, mock-3.5.1, snapshottest-0.6.0\ncollected 8 items\n\ntests/test_list_missing_audios.py .......F                                             [100%]\n\n========================================== FAILURES ==========================================\n_______________________________ test_returns_correct_audio_id ________________________________\n\nmocker = &lt;pytest_mock.plugin.MockerFixture object at 0x7fe9191977f0&gt;\n\n    def test_returns_correct_audio_id(mocker):\n        audio_id = mocker.patch('librelingo_audios.functions.audio_id')\n        audio_id.return_value = \"omg\"\n&gt;       assert list(list_missing_audios(fakes.course1))[0][0] == \"omg\"\nE       AssertionError: assert '' == 'omg'\nE         - omg\n\ntests/test_list_missing_audios.py:45: AssertionError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_returns_correct_audio_id - AssertionError: a...\n================================ 1 failed, 7 passed in 0.04s =================================\n</code></pre> <p>Let's cheat again to make the test pass:</p> <pre><code>def list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                # Returning only the first version because\n                # the other versions never need audio.\n                text = phrase.in_target_language[0]\n                audio_id(course.target_language, phrase.in_target_language[0])\n                yield [\"omg\", text]\n</code></pre> <p>Our tests now pass, but we are still returning the wrong output.</p> <p>Let's make another test case to make it impossible to cheat.</p> <p>Since the return value of the mock function is entirely determined by the fake value that we supply in our test case, this is a value the implementation can only reproduce by actually calling the function and taking the return value.</p> <p>The only way our implementation can cheat is if the return value is one simple static example, which is exactly what we have right now.</p> <p>The most straightforward way to avoid that is by adding an identical test case with a different mock value:</p> <pre><code>def test_returns_correct_audio_id_2(mocker):\n    audio_id = mocker.patch('librelingo_audios.functions.audio_id')\n    audio_id.return_value = \"foobar\"\n    assert list(list_missing_audios(fakes.course1))[0][0] == \"foobar\"\n</code></pre> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, mock-3.5.1, snapshottest-0.6.0\ncollected 9 items\n\ntests/test_list_missing_audios.py ........F                                            [100%]\n\n========================================== FAILURES ==========================================\n______________________________ test_returns_correct_audio_id_2 _______________________________\n\nmocker = &lt;pytest_mock.plugin.MockerFixture object at 0x7f83d4646a00&gt;\n\n    def test_returns_correct_audio_id_2(mocker):\n        audio_id = mocker.patch('librelingo_audios.functions.audio_id')\n        audio_id.return_value = \"foobar\"\n&gt;       assert list(list_missing_audios(fakes.course1))[0][0] == \"foobar\"\nE       AssertionError: assert 'omg' == 'foobar'\nE         - foobar\nE         + omg\n\ntests/test_list_missing_audios.py:51: AssertionError\n================================== short test summary info ===================================\nFAILED tests/test_list_missing_audios.py::test_returns_correct_audio_id_2 - AssertionError:...\n================================ 1 failed, 8 passed in 0.05s =================================\n</code></pre> <p>Let's fix our implementation:</p> <pre><code>from librelingo_utils import audio_id\n\ndef list_missing_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                # Returning only the first version because\n                # the other versions never need audio.\n                text = phrase.in_target_language[0]\n                id_ = audio_id(course.target_language, phrase.in_target_language[0])\n                yield [id_, text]\n</code></pre> <p>Now let's do a little bit of refactoring. I don't want to shove more functionality into this function, so let's rename it to <code>list_required_audios</code> across all files.</p> <p>Later I can create a <code>list_missing_audios</code> which will actually filter out all the audio files that already exist.</p> <pre><code>from librelingo_utils import audio_id\n\ndef list_required_audios(course):\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                # Returning only the first version because\n                # the other versions never need audio.\n                text = phrase.in_target_language[0]\n                id_ = audio_id(course.target_language, phrase.in_target_language[0])\n                yield [id_, text]\n</code></pre> <p>Just checking that the tests still pass...</p> <pre><code>==================================== test session starts =====================================\nplatform linux -- Python 3.9.1, pytest-6.2.2, py-1.10.0, pluggy-0.13.1\nrootdir: /home/kdani/repos/LibreLingo/apps/librelingo_audios\nplugins: pyfakefs-4.4.0, mock-3.5.1, snapshottest-0.6.0\ncollected 9 items\n\ntests/test_list_missing_audios.py .........                                            [100%]\n\n===================================== 9 passed in 0.03s ======================================\n\n</code></pre> <p>Now let's extract the iteration part to simplify our function:</p> <pre><code>from librelingo_utils import audio_id\n\ndef _iterate_phrases(course):\n    '\"Flatten\" a course into a sequence of phrases'\n    for module in course.modules:\n        for skill in module.skills:\n            for phrase in skill.phrases:\n                yield phrase\n\n\ndef list_required_audios(course):\n    for phrase in _iterate_phrases(course):\n        # Returning only the first version because\n        # the other versions never need audio.\n        text = phrase.in_target_language[0]\n        id_ = audio_id(course.target_language, phrase.in_target_language[0])\n        yield [id_, text]\n</code></pre> <p>That concludes this tutorial! If you are interested in learning more about how LibreLingo works, check out our source code on GitHub, our development documentation or join our chat.</p>"},{"location":"ui_translation.html","title":"User interface translation","text":""},{"location":"ui_translation.html#contribute-to-ui-translation-non-technical","title":"Contribute to UI Translation (Non-Technical)","text":"<p>POEditor is an online platform for collaborative translation and localization management. It allows contributors, both technical and non-technical, to help translate the user interface of LibreLingo into various languages.</p> <p>To help translate the user interface of LibreLingo and make it more accessible, start by joining the project on POEditor here.</p>"},{"location":"ui_translation.html#technical-overview-of-ui-translation-in-librelingo","title":"Technical Overview of UI Translation in LibreLingo","text":"<p>This section provides a brief technical overview of UI translation in LibreLingo using the svelte-i18n library for developers.</p>"},{"location":"ui_translation.html#using-the-translate-component","title":"Using the Translate Component","text":"<p>Import the Translate component from Translate.svelte and use it as an HTML tag with the key attribute set to the translation key. The text inside the tag serves as a fallback when a translation is not available.</p> <pre><code>import Translate from \"../../Translate.svelte\";\n\n// ...\n&lt;Translate key=\"course_page.button_practice\"&gt;Practice&lt;/Translate&gt;\n&lt;Translate key=\"course_page.button_continue\"&gt;Continue learning&lt;/Translate&gt;\n&lt;Translate key=\"course_page.button_learn\"&gt;Learn&lt;/Translate&gt;\n</code></pre>"},{"location":"ui_translation.html#translation-keys","title":"Translation Keys","text":"<p>Translation keys are unique identifiers used to reference text in the user interface. Contributors will translate these keys to other languages in POEditor.</p>"},{"location":"ui_translation.html#adding-new-translation-keys","title":"Adding new translation keys","text":"<p>To add new translation keys, please open a new issue on GitHub as this requires a maintainer to import new keys in POEditor.</p>"},{"location":"ui_translation.html#deliberate-lack-of-support-for-variables-in-translated-text","title":"Deliberate Lack of Support for Variables in Translated Text","text":"<p>LibreLingo avoids using variables in translated text to ensure quality and natural flow of translations across different languages, as using variables can lead to difficult problems for translators. Instead, provide separate translation keys for different variations of a sentence, allowing translators to provide natural-sounding translations for each specific case.</p>"},{"location":"ui_translation.html#translating-new-pages","title":"Translating New Pages","text":"<p>By default, pages will be translated to English or the language of the user's browser. However, for pages inside a course, the pages should be translated to the source language of the course to have consistency. To achieve this, you can copy the logic from an existing page and adapt it to the new page.</p> <p>Here's a simplified code example to help you understand the process:</p> <pre><code>&lt;script lang=\"ts\" context=\"module\"&gt;\n  export async function preload(page) {\n    const { get_course } = await import(\"../../../course-client\")\n    const { courseName } = page.params\n\n    return await get_course({ courseName })\n  }\n&lt;/script&gt;\n\n&lt;script lang=\"ts\"&gt;\n  import { locale } from \"svelte-i18n\"\n\n  export let uiLanguage = null\n\n  locale.set(uiLanguage)\n&lt;/script&gt;\n</code></pre> <p>In the example above, the preload function imports and retrieves the course data. Then, the <code>uiLanguage</code> variable is set to the desired source language of the course, and the <code>locale.set(uiLanguage)</code> function is used to set the translation language for the page.</p>"},{"location":"ui_translation.html#updating-translations","title":"Updating Translations","text":"<p>Translations are updated periodically in LibreLingo, but this is currently a manual process and is not automated yet. If you want translations to be uploaded and integrated into the project, you can create a new issue on GitHub asking for the translations to be updated.</p> <p>To request an update, visit the LibreLingo GitHub repository, create a new issue, and provide the necessary details about the translations you've contributed. A maintainer will then manually update the translations as needed.</p>"},{"location":"website_tos.html","title":"Website tos","text":"<p>Terms of Service of librelingo.app</p> <p>LibreLingo (\"Us\" or \"We\") provides the librelingo.app website and various related services (collectively, the \"Website\") to you, the User, subject to your compliance with all the terms, conditions, and notices contained or referenced herein (the \"Terms of Service\"), as well as any other written agreement between us and you.</p> <p>In addition, when using particular services or materials on this Website, Users shall be subject to any posted rules applicable to such services or materials that may contain terms and conditions in addition to those in these Terms of Service. All such guidelines or rules are hereby incorporated by reference into these Terms of Service.</p> <p>These Terms of Service are effective as of 2020 Jul 18. We expressly reserve the right to change these Terms of Service from time to time without notice to you. You acknowledge and agree that it is your responsibility to review this Website and these Terms of Service from time to time and to familiarize yourself with any modifications.</p> <p>Your continued use of this Website after such modifications will constitute acknowledgement of the modified Terms of Service and agreement to abide and be bound by the modified Terms of Service. This Terms of Service was created by Terms of Service Template and the Terms and Conditions Generator.</p> <p>We reserve the sole right to either modify or discontinue the Website, including any of the Website\u2019s features, at any time with or without notice to you. We will not be liable to you or any third party should we exercise such right. Any new features that augment or enhance the then-current services on this Website shall also be subject to these Terms of Service. Conduct on Website</p> <p>Your use of the Website is subject to all applicable laws and regulations, and you are solely responsible for the substance of your communications through the Website. By posting information in or otherwise using any communications service, chat room, message board, newsgroup, software library, or other interactive service that may be available to you on or through this Website, you agree that you will not upload, share, post, or otherwise distribute or facilitate distribution of any content \u2014 including text, communications, software, images, sounds, data, or other information \u2014 that:</p> <pre><code>Is unlawful, threatening, abusive, harassing, defamatory, libelous, deceptive, fraudulent, invasive of another\u2019s privacy, tortious, contains explicit or graphic descriptions or accounts of sexual acts (including but not limited to sexual language of a violent or threatening nature directed at another individual or group of individuals), or otherwise violates our rules or policies\nVictimizes, harasses, degrades, or intimidates an individual or group of individuals on the basis of religion, gender, sexual orientation, race, ethnicity, age, or disability\nInfringes on any patent, trademark, trade secret, copyright, right of publicity, or other proprietary right of any party\nConstitutes unauthorized or unsolicited advertising, junk or bulk email (also known as \"spamming\"), chain letters, any other form of unauthorized solicitation, or any form of lottery or gambling\nContains software viruses or any other computer code, files, or programs that are designed or intended to disrupt, damage, or limit the functioning of any software, hardware, or telecommunications equipment or to damage or obtain unauthorized access to any data or other information of any third party\nImpersonates any person or entity, including any of our employees or representatives\n</code></pre> <p>We neither endorse nor assume any liability for the contents of any material uploaded or submitted by third party users of the Website. We generally do not pre-screen, monitor, or edit the content posted by users of communications services, chat rooms, message boards, newsgroups, software libraries, or other interactive services that may be available on or through this Website. However, we and our agents have the right at their sole discretion to remove any content that, in our judgment, does not comply with these Terms of Service and any other rules of user conduct for our site, or is otherwise harmful, objectionable, or inaccurate. We are not responsible for any failure or delay in removing such content. You hereby consent to such removal and waive any claim against us arising out of such removal of content.</p> <p>You agree that we may at any time, and at our sole discretion, terminate your membership, account, or other affiliation with our site without prior notice to you for violating any of the above provisions. In addition, you acknowledge that we will cooperate fully with investigations of violations of systems or network security at other sites, including cooperating with law enforcement authorities in investigating suspected criminal violations. Third Party Websites</p> <p>This site may link you to other sites on the Internet or otherwise include references to information, documents, software, materials and/or services provided by other parties. These sites may contain information or material that some people may find inappropriate or offensive.</p> <p>These other sites and parties are not under our control, and you acknowledge that we are not responsible for the accuracy, copyright compliance, legality, decency, or any other aspect of the content of such sites, nor are we responsible for errors or omissions in any references to other parties or their products and services. The inclusion of such a link or reference is provided merely as a convenience and does not imply endorsement of, or association with, the Website or party by us, or any warranty of any kind, either express or implied. Intellectual Property</p> <p>All custom graphics, icons, logos, and service names used on the Website are registered trademarks, service marks, and/or artwork held under copyright of LibreLingo or its Affiliates. All other marks are property of their respective owners. Nothing in these Terms of Service grants you any right to use any trademark, service mark, logo, and/or the name or trade names of LibreLingo or its Affiliates. Disclaimer of Warranties</p> <p>Content available through this Website often represents the opinions and judgments of an information provider, site user, or other person or entity not connected with us. We do not endorse, nor are we responsible for the accuracy or reliability of, any opinion, advice, or statement made by anyone other than an authorized LibreLingo spokesperson speaking in his/her official capacity. Please refer to the specific editorial policies posted on various sections of this Website for further information, which policies are incorporated by reference into these Terms of Service.</p> <p>You understand and agree that temporary interruptions of the services available through this Website may occur as normal events. You further understand and agree that we have no control over third party networks you may access in the course of the use of this Website, and therefore, delays and disruption of other network transmissions are completely beyond our control.</p> <p>You understand and agree that the services available on this Website are provided \"AS IS\" and that we assume no responsibility for the timeliness, deletion, mis-delivery or failure to store any user communications or personalization settings. International Use</p> <p>Although this Website may be accessible worldwide, we make no representation that materials on this Website are appropriate or available for use in locations outside the United States, and accessing them from territories where their contents are illegal is prohibited. Those who choose to access this Website from other locations do so on their own initiative and are responsible for compliance with local laws. Any offer for any product, service, and/or information made in connection with this Website is void where prohibited. Termination</p> <p>You agree that we may, in our sole discretion, terminate or suspend your access to all or part of the Website with or without notice and for any reason, including, without limitation, breach of these Terms of Service. Any suspected fraudulent, abusive or illegal activity may be grounds for terminating your relationship and may be referred to appropriate law enforcement authorities.</p> <p>Upon termination or suspension, regardless of the reasons therefore, your right to use the services available on this Website immediately ceases, and you acknowledge and agree that we may immediately deactivate or delete your account and all related information and files in your account and/or bar any further access to such files or this Website. We shall not be liable to you or any third party for any claims or damages arising out of any termination or suspension or any other actions taken by us in connection with such termination or suspension. Governing Law</p> <p>These Terms of Service and any dispute or claim arising out of, or related to them, shall be governed by and construed in accordance with the internal laws of the es without giving effect to any choice or conflict of law provision or rule.</p> <p>Any legal suit, action or proceeding arising out of, or related to, these Terms of Service or the Website shall be instituted exclusively in the federal courts of es.</p>"},{"location":"courses/index.html","title":"LibreLingo Course Documentation","text":"<p>This document describes how LibreLingo's course system works and how to contribute to course content.</p> <p>Understanding this document is the first step if you want to:</p> <ul> <li>edit or improve an existing course</li> <li>contribute a new accepted answer</li> <li>create a new course from scratch</li> </ul> <p>This is also a good resource if you just want to learn about the course system in general.</p> <p>Confused? Ask people on GitHub Discussions.</p> <p>Table of Contents:</p> <ul> <li>Getting started</li> <li>Basics</li> <li>Terminology</li> <li>Exploring the courses</li> <li>Things to do for new contributors</li> <li>Courses currently open for contributions</li> <li>Caution</li> <li>Languages that don't use the Latin alphabet</li> </ul>"},{"location":"courses/index.html#getting-started","title":"Getting started","text":"<ul> <li>Totally new to LibreLingo? Head to the Basics section! It will give you a general understanding of the course system.</li> <li>Want to edit or improve existing courses? Check out this page about editing courses.</li> <li>If you want to create new courses (typically suited for course designers or advanced users), go to this page.</li> </ul>"},{"location":"courses/index.html#basics","title":"Basics","text":""},{"location":"courses/index.html#terminology","title":"Terminology","text":"<p>You'll need to have an idea of the basic terminology used in LibreLingo:</p> <ul> <li>A Course is a set of Modules. There is typically one course for each language pair, e.g, Spanish for English speakers, Japanese for Italian speakers, etc.</li> <li>A Module is a set of Skills.</li> <li>A Skill is a small unit of course material. In the web app, the user will typically practice a Skill at a time.</li> </ul> <p>These concepts represent a hierarchical structure to LibreLingo course material: <code>Courses &gt; Modules &gt; Skills</code></p> <ul> <li>The target language is the language the course is meant to teach.</li> <li>The source language is a language that users of the course are assumed to know.</li> </ul> <p></p>"},{"location":"courses/index.html#exploring-the-courses","title":"Exploring the courses","text":"<p>To better understand how courses work, you can explore how the course files are organized on this repository.</p> <p>The source of the courses are in separate git repositories. You will find a list of courses at the bottom of this page. The course repository name is usually structured in <code>&lt;destination language&gt;-from-&lt;target audience's language&gt;</code>, e.g., <code>french-from-english</code> teaches French to English speakers. In each course, you'll find modules. And in each module, you'll find skills, which are saved as individual .yaml files.</p> <p>Now let's look into how they look on the frontend to the user.</p> <p>Go to LibreLingo web app. Courses are listed there, e.g., You see a \"START LEARNING SPANISH\" button. (NOTE: Depending on the state and completeness of the courses, all of them might not be shown there on the website.)</p> <p>When you enter a course page, for example, the Spanish course, you'll see headings like Basics, Introduction, and Activities. These are modules. Each module contains a set of skills. Modules organize skills into groups, which is their only purpose. Think of them as groups of units or chapters.</p> <p>\"Skills\" are units of course content focused on a particular topic. Each skill is a set of new knowledge, such as new words or phrases. Skills can focus on vocabulary and follow a theme: the \"Animal\" skill has words and phrases related to animals, and the \"Food\" skill is all about food. Skills can also focus on teaching grammar.</p> <p>Inside a skill YAML file there are some keys that you might want to learn of, which is explained in detail here.</p> <p></p>"},{"location":"courses/index.html#things-you-can-do-as-a-new-contributor","title":"Things you can do as a new contributor","text":"<p>If you are new to contributing to course data, these are the things you can do to get a proper understanding of the courses and have a good time with the project:</p> <ul> <li>Go to LibreLingo's Spanish course and try out some of the skills. Just get an idea of how the questions are structured and the type of answers made available.</li> <li>Browse this repository or download it and study the <code>courses</code> directory and how everything's laid out. Be sure to have a good text editor, such as Notepad++ or Geany, in order to view or edit files.</li> <li>Try to learn how data is organized within .yaml files and directories. Course, Module and Skill documentation may help you with this.</li> <li>Try to learn how YAML works. (see here or here or here)</li> <li>Determine some information about the language you're working with.</li> <li>Your language name in English, e.g., French, Ancient Greek</li> <li>Language slug (lowercase and no spaces), e.g., french, ancient-greek</li> <li>IETF BCP 47 tag name for your language, which you can get from here. Just look for the <code>Subtag</code> for your language, e.g., fr, grc</li> <li>If you have questions, feel free to ask on Discussions.</li> </ul> <p></p>"},{"location":"courses/index.html#courses-currently-open-for-contributions","title":"Courses currently open for contributions","text":"<p>Check out our devtool page for the up-to-date list.</p>"},{"location":"courses/index.html#caution","title":"Caution","text":""},{"location":"courses/index.html#languages-that-dont-use-the-latin-alphabet","title":"Languages that don't use the Latin alphabet","text":"<p>Currently, LibreLingo doesn't have enough features to support teaching new alphabets. Solving this is a priority, but it will take time. Technically in most cases, language pairs that use the same alphabet (for example, Ukrainian for Russian speakers) should work just fine, but it hasn't been tested yet.</p>"},{"location":"courses/challenge.html","title":"LibreLingo Documentation on Challenge","text":"<p>As they study using LibreLingo, users respond to a series of tasks or questions called Challenges.</p> <p>Challenges are not configured directly but automatically generated from Skill configuration.</p> <p>Confused? Ask people on GitHub Discussions.</p> <p>Table of Contents:</p> <ul> <li>Challenge order</li> <li>Cards challenge</li> <li>Short input challenge</li> <li>Options challenge</li> <li>Chips challenge</li> <li>Listening challenge</li> </ul>"},{"location":"courses/challenge.html#challenge-order","title":"Challenge order","text":"<p>The order of words and phrases within a skill is random, but certain challenge types always come before others. This is denoted by the Priority values listed under each challenge type. First-priority challenges come before second-priority challenges, which come before third-priority challenges.</p>"},{"location":"courses/challenge.html#cards-challenge","title":"Cards challenge","text":"<ul> <li>Generated from: <code>New words</code> only</li> <li>Task: translation, multiple-choice</li> <li>Direction: source -&gt; target only</li> <li>Properties used: <code>Word</code>, <code>Translation</code>, <code>Images</code> -- both of the asked word and of two or three other words in the same skill</li> <li>Mini-dictionary available: No</li> <li>Priority: First</li> </ul> <p>In this challenge type, the user is presented with a word in their source language and three (four on mobile) cards to choose from. Each card contains a target language word and a matching image, which is a big hint since the user may have never seen this target language word before.</p> <p>Note that for each card, a random image is selected from the word's <code>Images</code> array.</p>"},{"location":"courses/challenge.html#short-input-challenge","title":"Short input challenge","text":"<ul> <li>Generated from: <code>New words</code> only</li> <li>Task: translation, free-form</li> <li>Direction: source -&gt; target only</li> <li>Properties used: <code>Word</code>, <code>Translation</code>, <code>Images</code></li> <li>Mini-dictionary available: Yes</li> <li>Priority: Second</li> </ul> <p>In this challenge type, the user is presented with a word in their source language and a text box in which to input the translation into the target language. There is also a random image from the <code>Images</code> array on the right, but since this challenge asks for the target language, the image does not give the user any additional information. If the user does need a hint, the mini-dictionary is available for this challenge.</p>"},{"location":"courses/challenge.html#options-challenge","title":"Options challenge","text":"<ul> <li>Generated from: <code>Phrases</code> only</li> <li>Task: translation, multiple-choice</li> <li>Direction: source -&gt; target only</li> <li>Properties used: <code>Phrase</code>, <code>Translation</code> both of the asked phrase and two other phrases in the same skill</li> <li>Mini-dictionary available: No</li> <li>Priority: First</li> </ul> <p>In this challenge type, the user is presented with a phrase in their source language and three options from which they must choose the correct translation into the target language. There are no hints available.</p>"},{"location":"courses/challenge.html#chips-challenge","title":"Chips challenge","text":"<ul> <li>Generated from: <code>Phrases</code> only</li> <li>Task: translation, set of words provided</li> <li>Direction: Both directions: source -&gt; target, target -&gt; source</li> <li>Properties used:</li> <li>If source -&gt; target: <code>Phrase</code>, <code>Translation</code>, <code>Alternative translations</code>; <code>Translation</code> and <code>Alternative translations</code> of other phrases anywhere in the course</li> <li>If target -&gt; source: <code>Translation</code>, <code>Phrase</code>, <code>Alternative versions</code>; <code>Phrase</code> and <code>Alternative versions</code> of other phrases anywhere in the course</li> <li>Mini-dictionary available: Yes</li> <li>Priority: Third</li> </ul> <p>In this challenge type, the user is presented with a phrase in one language and a set of words in the other language. This set will always include all words of the <code>Translation</code> field. The user's task is to use these words as \"building blocks\" to create any acceptable translation for the phrase they've been presented with.</p> <p>The mini-dictionary is available to give hints about individual words, but there are no hints about grammar or sentence structure.</p> <p>The chips will never include exact duplicates of each other.</p>"},{"location":"courses/challenge.html#listening-challenge","title":"Listening challenge","text":"<ul> <li>Generated from: <code>New words</code> and <code>Phrases</code></li> <li>Task: transcription</li> <li>Direction: N/A, target language only</li> <li>Properties used: <code>Word</code> or <code>Phrase</code></li> <li>Mini-dictionary available: No</li> <li>Priority: Second</li> </ul> <p>In this challenge type, the user is played audio of a word or phrase in the target language and is presented with a text box to transcribe the audio (still in the target language). The user can re-listen to the audio if necessary.</p>"},{"location":"courses/course.html","title":"LibreLingo Documentation on Course","text":"<p>A Course is the highest element in the course structure. It contains modules, which in turn contain skills. There is usually one course for each language.</p> <p>To get a better understanding, you can explore the <code>courses</code> directory on this repository and read the course basics.</p> <p>Confused? Ask people on GitHub Discussions.</p> <p>Table of Contents:</p> <ul> <li>Tree structure</li> <li><code>course.yaml</code></li> <li>Data breakdown</li> </ul>"},{"location":"courses/course.html#tree-structure","title":"Tree structure","text":"<p>A typical tree structure for a course is like this:</p> <pre><code>courses/spanish-from-english/\n\u251c\u2500\u2500 activities\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 module.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 skills\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 continuous.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 ser_estar.yaml\n\u251c\u2500\u2500 basics\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 module.yaml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 skills\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 animals.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 clothes.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 food.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 nature.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 plurals.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 professions.yaml\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 verb_plurals.yaml\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 verbs.yaml\n\u251c\u2500\u2500 course.yaml\n\u2514\u2500\u2500 introduction\n    \u251c\u2500\u2500 module.yaml\n    \u2514\u2500\u2500 skills\n        \u251c\u2500\u2500 adjectives.yaml\n        \u251c\u2500\u2500 phrases.yaml\n        \u2514\u2500\u2500 preferences.yaml\n</code></pre> <p>Here, <code>activities</code>, <code>basics</code>, and <code>introduction</code> are modules. The <code>continuous.yaml</code>, <code>animals.yaml</code> etc., are skills. There is also a file called <code>course.yaml</code> directly inside the course directory. This file contains information about the course (see below).</p> <p>A course directory name should not have spaces and should be written in <code>slug-form</code> in plain English.</p> <p></p>"},{"location":"courses/course.html#courseyaml","title":"<code>course.yaml</code>","text":"<p>A <code>course.yaml</code> file for the Spanish course looks like this:</p> <pre><code># This file contains generic meta-data about the course\n\nCourse:\n  Language:\n    Name: Spanish\n    IETF BCP 47: es\n  For speakers of:\n    Name: English\n    IETF BCP 47: en\n  License:\n    Name: Attribution-ShareAlike 4.0 International\n    Short name: CC BY-SA 4.0\n    Link: https://creativecommons.org/licenses/by-sa/4.0/legalcode\n  Special characters:\n    - \"\u00e1\"\n    - \"\u00c1\"\n    - \"\u00e9\"\n    - \"\u00c9\"\n    - \"\u00ed\"\n    - \"\u00cd\"\n    - \"\u00f3\"\n    - \"\u00d3\"\n    - \"\u00fa\"\n    - \"\u00da\"\n    - \"\u00fc\"\n    - \"\u00dc\"\n    - \"\u00f1\"\n    - \"\u00d1\"\n    - \"\u00bf\"\n    - \"\u00a1\"\n\nModules:\n  - basics/\n  - introduction/\n  - activities/\n</code></pre> <p></p>"},{"location":"courses/course.html#data-breakdown","title":"Data breakdown","text":"<p><code>Course</code> has information about the course.</p> <ul> <li><code>Language</code></li> <li><code>Language &gt; Name</code>: The name of the language you want to test for or teach.</li> <li><code>Language &gt; IETF BCP 47</code>: The IETF BCP 47 code of the above language. List available here.</li> <li><code>For speakers of</code></li> <li><code>For speakers of &gt; Name</code>: The name of the language your target audience already speaks.</li> <li><code>For speakers of &gt; IETF BCP 47</code>: The IETF BCP 47 code of the above language. List available here.</li> <li><code>License</code></li> <li><code>License &gt; Name</code>: Full license name under which your course is made available. In most cases, it's ok to keep it as is.</li> <li><code>License &gt; Short name</code>: Short name for the license, e.g., <code>CC BY-SA 4.0</code></li> <li><code>License &gt; Link</code>: URL to reach the full text of the license, e.g., <code>https://creativecommons.org/licenses/by-sa/4.0/legalcode</code></li> <li><code>Special characters</code>: An array of special characters that might not be present on a typical English keyboard.</li> </ul> <p><code>Modules</code> has a list of module directory names followed by a <code>/</code>.</p> <p></p>"},{"location":"courses/course.html#automated-spell-checker","title":"Automated spell checker","text":"<p>To avoid mistakes, you can enable automatic spell-checking in your course. Automatic spell-checking won't let you export a course if it has spelling mistakes. This can prevent incorrect changes from being merged into your course.</p> <p>The spell checker is implemeneted using Hunspell. In order to use it, you need to have Hunspell installed on your computer.</p> <p>To install Hunspell, follow the instructions of your operating system. On Ubuntu, you can install Hunspell like so:</p> <pre><code>sudo apt-get update -y\nsudo apt-get install -y hunspell\n</code></pre> <p>Don't forget to also install a dictionary for the languages that you use in your course. Here's a list of dictionary packages available on Ubuntu: https://packages.ubuntu.com/bionic/hunspell-dictionary</p> <p>In order to enable Hunspell in your course, add the following section to your <code>course.yaml</code>:</p> <pre><code>Settings:\n  Hunspell:\n    German: de # replace with the language code for your language\n    English: en-US # replace with the language code for your language\n</code></pre> <p>Keep in mind that you also need to have the <code>hunspell</code> Python package installed. To install it, just run:</p> <pre><code>pip install hunspell\n</code></pre>"},{"location":"courses/creating-courses.html","title":"Creating courses","text":""},{"location":"courses/creating-courses.html#creating-a-new-librelingo-course","title":"Creating a new LibreLingo course","text":"<p>Before creating a new course, we recommend you try contributing to an existing one or at least exploring other parts of this documentation. In order to be successful in creating a new course from scratch, you'll need sufficient understanding of the project and how the courses work.</p> <p>WARNING: If you just want to make an existing course to be available in your language, please refer to this page instead and ignore this page. Following this page for editing existing courses can cause invalid data to be created.</p> <p>[TODO: Add more text on creating a course from scratch, possibly with cli tool, etc.]</p> <p>Before creating a new course, it's recommended that you first contribute to existing courses. Learn how to edit or create courses. In order to create a new course and get it published, you'll probably need some technical assistance as, at this stage, several things might not be automated.</p> <p>You can start by creating your pull request. I'll get to help with the pull requests as soon as possible.</p>"},{"location":"courses/editing-courses.html","title":"Editing LibreLingo courses","text":"<p>Thank you for your interest in contributing to LibreLingo. This document is here to guide you in editing or translating existing courses.</p> <p>To get a better understanding, we recommend you read the course basics first.</p> <p>Confused? Ask people on GitHub Discussions.</p> <p>Table of Contents:</p> <ul> <li>Setup</li> <li>Pulling code and branching</li> <li>Pushing code and creating Pull Request</li> <li>Following up with responses</li> <li>Updating audio</li> <li>Translating based on an existing course</li> <li>Editing existing courses</li> </ul>"},{"location":"courses/editing-courses.html#setup","title":"Setup","text":""},{"location":"courses/editing-courses.html#pulling-code-and-branching","title":"Pulling code and branching","text":"<p>LibreLingo uses a Git repository for maintaining code. In order to contribute changes, you first need to fork this project. To fork:</p> <ul> <li>login to GitHub</li> <li>then go to LibreLingo repository</li> <li>click the \"Fork\" button (beside Watch and Star)</li> </ul> <p>In a moment, you will be taken to a new repository. Closely notice the url as it will be <code>https://github.com/&lt;your github username&gt;/LibreLingo/</code> instead of <code>https://github.com/LibreLingo/LibreLingo/</code>. You should now have a copy of the project source code under your name.</p> <p>This is called \"forking\". Forking allows you to apply your changes without directly changing the original project.</p> <p>Now click the Green \"Code\" button and copy the HTTPS clone URL.</p> <p>Make sure you have Git installed on your computer. If not, follow these instructions to install it on your operating system.</p> <p>If you are not used to command-line programs, there are also graphical interface applications for Git, like Git Cola, TortoiseGit, etc. They can basically do the same thing but graphically. But we'll focus on the command line here. If you want to use them, consult their documentation to get your way around them.</p> <p>To clone the repository you forked into earlier:</p> <pre><code>git clone &lt;URL you copied&gt;\ncd LibreLingo\n</code></pre> <p>The first command will download the forked repository on your computer so that you can make edits. The second one will go inside the repository directory for future <code>git</code> commands to work.</p> <p>In order to add your name and email to the changes you do later, git would need to know them before you apply any changes to the code. You can add these by running:</p> <pre><code>git config --global user.name \"John Doe\"\ngit config --global user.email \"john@example.com\"\n</code></pre> <p>NOTE: Replace the name and email above to match yours. Setting <code>--global</code> sets these values globally for any repo on the machine. You can run it without the <code>--global</code> parameter to only set it for this repo.</p> <p>Now create a new branch for your changes:</p> <pre><code>git checkout -b my-awesome-branch main\n</code></pre> <p>This creates a new branch named <code>my-awesome-branch</code> from the <code>main</code> branch and switches to the new branch. The branch name doesn't matter that much. You just need to be able to recognize it yourself from a list of other branches.</p> <p>You can name it as your language name if you want, but without spaces (e.g. <code>korean</code>, <code>ancient-greek</code>). You can check which branch you are on by running <code>git status</code> and checking the \"On branch\" line.</p> <p>You are now ready to make changes.</p> <p></p>"},{"location":"courses/editing-courses.html#pushing-code-and-creating-pull-request","title":"Pushing code and creating Pull Request","text":"<p>These instructions are written to be used after making the changes. So you can read the rest of the page and continue from here if you want.</p> <p>After you have made your changes, add the files and commit your changes:</p> <pre><code>git add courses/\ngit commit -m \"Add Example language\"\n</code></pre> <p>NOTE: Replace the commit message to describe what it does in your case. Another thing is that make your changes only on one commit because it will be easier to maintain and apply possible changes into later. If you want to add something else to the commit, just use the <code>--amend</code> command below.</p> <p>This still needs to be sent to the repo online. The changes are only on your machine. If you feel like you've missed something, there is a chance you can make the changes and run:</p> <pre><code>git add courses/\ngit commit --amend --no-edit\n</code></pre> <p>This will add (amend) the new changes to the last commit that you did earlier. To see what changes are included in your last commit, run <code>git show -1</code> and use Page up and Page down keys to scroll through it all or q to quit.</p> <p>When you are ready to push the changes:</p> <pre><code>git push origin HEAD\n# or\ngit push origin my-awesome-branch\n</code></pre> <p>You may be asked to enter your GitHub username and password.</p> <p>NOTE: It's recommended that you create an access token and use it instead of the password due to security reasons. Due to a change in GitHub's policy, using passwords will not work from August 13, 2021, and may not work on certain times during June and July.</p> <p>Now go to your fork of the project (e.g., <code>https://github.com/&lt;your github username&gt;/LibreLingo/</code>). You'll see a message above the file list saying something like \"my-awesome-branch had recent pushes less than a minute ago\", offering you to \"Compare &amp; pull request\" with a button. Click the button and explain what your changes are about and post a pull request.</p> <p>A pull request is a request to apply your changes to the original project. Such a request is not immediately applied but goes through a review process.</p> <p>After you post the pull request, project maintainers will look into your changes and respond. When they do, you'll get a notification on GitHub.</p> <p></p>"},{"location":"courses/editing-courses.html#following-up-with-pr-responses","title":"Following up with PR responses","text":"<p>Depending on the Pull Request (PR) you made earlier, you can either get accepted right away (in that case, it will be \"merged\"), or you may need to make some changes (you'll get comments). If the project maintainers ask for a change, do this:</p> <ul> <li><code>cd</code> into the git repository directory, or open a terminal on the directory</li> <li>Make sure you're on the branch in which you made changes earlier. Check with <code>git status</code>, and if not on the proper branch, switch to it with:</li> </ul> <pre><code>git checkout my-awesome-branch\n</code></pre> <ul> <li>NOTE: If you don't remember which branch you were in, check the Pull request you made or run <code>git branch -a</code> to find out and switch to it.</li> <li>Make the changes requested.</li> <li>Check that the changes are what you were asked to do by running <code>git diff</code> (Page up/down to scroll, q to quit).</li> <li>When ready:</li> </ul> <pre><code>git add courses/\ngit commit --amend --no-edit\ngit push origin HEAD -f\n</code></pre> <p>The <code>-f</code> switch is to force push so that the existing commit gets updated. NOTE: The <code>git commit --amend</code> command amends (or updates) the changes into the last commit you made. So it is important that you keep your changes in a branch on a single commit (if you followed the instructions above, you should be fine).</p>"},{"location":"courses/editing-courses.html#updating-audio","title":"Updating audio","text":"<p>If you've added or changed any words or phrases in the course, and the course you're editing has text-to-speech (TTS) audio, new audio will need to be generated to match your changes.</p> <p>Right now, the only TTS provider supported by LibreLingo is Amazon Polly. You'll need to install and configure the AWS CLI so you can use Polly to generate audio. Then, in the root directory of the LibreLingo repository, run:</p> <pre><code>./scripts/updateAudioForYamlCourse.sh &lt;name of edited course, e.g. spanish-from-english&gt;\n</code></pre> <p>If you'd like to simply see the audio changes that need to be made without actually performing them, add the <code>--dry-run</code> flag. In rare circumstances, you may want to completely regenerate the audio for a course, overwriting everything that's already there. This can be done with the <code>--destructive</code> flag -- but use it with care!</p> <p></p>"},{"location":"courses/editing-courses.html#translating-based-on-an-existing-course","title":"Translating based on an existing course","text":"<p>If you just want to translate an existing course, the simplest way is to copy the existing course. Right now, <code>spanish-from-english</code> is the most complete. So:</p> <ul> <li>Go to the <code>courses</code> directory on the repository you cloned earlier. Make sure you also use the <code>git checkout</code> command to create a new branch.</li> <li>Copy <code>spanish-from-english</code> and rename the copy as <code>yourlanguageslug-from-english</code> (replace <code>yourlanguageslug</code> to your language slug)</li> <li>Edit <code>yourlanguageslug-from-english/course.yaml</code> to change keys under <code>Language</code> (details here)</li> <li>Now keep editing Spanish parts to translate into your language with a text editor</li> <li>If you need more details, consult Course, Module, or Skill documentation</li> </ul> <p>NOTE: When editing existing skill yaml files, do not change the skill IDs since you are just editing existing courses. If you change skill IDs, it may create issues. New skill IDs are only needed if you create new skills.</p> <p>When you are done, you can continue to the pull request section to submit the changes.</p> <p></p>"},{"location":"courses/editing-courses.html#editing-existing-courses","title":"Editing existing courses","text":"<p>If you want to make edits to course data, consult Course, Module or Skill documentation for details or discuss if you're unsure on how to do something.</p>"},{"location":"courses/module.html","title":"LibreLingo Documentation on Module","text":"<p>A Module resides below the courses within the course structure. It contains skills.</p> <p>They have less complexity as they're here to group skills and nothing else. On the frontend, they appear as headings to group skills.</p> <p>To get a better understanding, you can read the course basics.</p> <p>Confused? Ask people on GitHub Discussions.</p> <p>Table of Contents:</p> <ul> <li>Tree structure</li> <li><code>module.yaml</code></li> <li>Data breakdown</li> <li>Creating new module</li> </ul>"},{"location":"courses/module.html#tree-structure","title":"Tree structure","text":"<p>A typical tree structure for a module is like this:</p> <pre><code>courses/spanish-from-english/basics/\n\u251c\u2500\u2500 module.yaml\n\u2514\u2500\u2500 skills\n    \u251c\u2500\u2500 animals.yaml\n    \u251c\u2500\u2500 clothes.yaml\n    \u251c\u2500\u2500 food.yaml\n    \u251c\u2500\u2500 nature.yaml\n    \u251c\u2500\u2500 plurals.yaml\n    \u251c\u2500\u2500 professions.yaml\n    \u251c\u2500\u2500 verb_plurals.yaml\n    \u2514\u2500\u2500 verbs.yaml\n</code></pre> <p>Here, <code>animals.yaml</code>, <code>clothes.yaml</code> and <code>food.yaml</code> etc. are skills. Directly inside the module directory, there is also a file called <code>module.yaml</code>. This file contains information about the module (see below).</p> <p>NOTE: A module directory name should not have spaces, be written in slug-form, and ideally in plain English characters. If your source language is not English, you can try roughly to follow the pronunciation and write it using English characters. The human-friendly <code>Name</code> in the yaml, however, can contain uppercase, spaces, and the actual name in the source language. The yaml skill files under it should always be inside a directory named <code>skills</code>.</p> <p>NOTE: When a new module is created, it should be listed on the <code>course.yaml</code> under <code>Modules</code> key.</p> <p></p>"},{"location":"courses/module.html#moduleyaml","title":"<code>module.yaml</code>","text":"<p>A <code>module.yaml</code> file for the Spanish Basics module looks like this:</p> <pre><code>Module:\n  Name: \"Basics\"\n\nSkills:\n  - animals.yaml\n  - food.yaml\n  - clothes.yaml\n  - nature.yaml\n  - verbs.yaml\n  - plurals.yaml\n  - verb_plurals.yaml\n  - professions.yaml\n</code></pre>"},{"location":"courses/module.html#data-breakdown","title":"Data breakdown","text":"<p><code>Name</code> is the human-friendly name of the module. The name should be in the target audience's language or the language you set under <code>For speakers of</code> key on your <code>course.yaml</code>. For example, if the course is <code>spanish-from-english</code>, it should be in English. <code>Skills</code> has a list of yaml files for the skills under the module. NOTE: The order in which the skills appear in this YAML file is the order they will appear in the web app as well.</p> <p></p>"},{"location":"courses/module.html#creating-a-new-module","title":"Creating a new module","text":"<p>To create a new module,</p> <ul> <li>Create a directory under the course with the module name (keep it lowercase and no spaces)</li> <li>Create a <code>module.yaml</code> file and put yaml code for the module.</li> </ul> <p>For example, <code>courses/french-from-english/traveling/module.yaml</code> from the example above:</p> <pre><code>Module:\n  Name: traveling\n\nSkills:\n  - hello.yaml\n</code></pre> <p>Now create skills as you want and list them under the <code>Skills</code> key.</p>"},{"location":"courses/skill.html","title":"LibreLingo Documentation on Skill","text":"<p>A Skill resides below a Module within the course structure. It's the lowest element in the course hierarchy. It contains a set of words and phrases to be taught to the user.</p> <p>A skill is usually centered around a specific theme. This could be introducing a new grammar concept or just vocabulary to talk about a certain topic.</p> <p>The words and phrases that make up a skill are taught to the user using automatically generated questions and tasks.</p> <p>Confused? Ask people on GitHub Discussions.</p> <p>Table of Contents:</p> <ul> <li>Tree structure</li> <li><code>(skill_name).yaml</code></li> <li>Data breakdown</li> <li>How skills are taught to the user</li> <li>Creating new skills</li> <li>Examples of editing a skill</li> <li>Tips for creating good skills</li> <li><code>(skill_name).md</code></li> </ul>"},{"location":"courses/skill.html#tree-structure","title":"Tree structure","text":"<p>A typical tree structure for skills under a module is as follows:</p> <pre><code>courses/spanish-from-english/basics/skills/\n\u251c\u2500\u2500 animals.yaml\n\u251c\u2500\u2500 clothes.yaml\n\u251c\u2500\u2500 food.yaml\n\u251c\u2500\u2500 nature.yaml\n\u251c\u2500\u2500 plurals.yaml\n\u251c\u2500\u2500 professions.yaml\n\u251c\u2500\u2500 verb_plurals.yaml\n\u2514\u2500\u2500 verbs.yaml\n</code></pre> <p>Here, <code>animals.yaml</code>, <code>clothes.yaml</code>, and <code>food.yaml</code> are skills. These skill files are kept inside a <code>skills</code> folder. The YAML files contain information about the skill (see below).</p> <p>Skill yaml filenames should not have spaces and should be written in <code>slug-form</code>. The human-friendly <code>Name</code> in the yaml, however, can contain uppercase and spaces.</p> <p></p>"},{"location":"courses/skill.html#skill_nameyaml","title":"<code>(skill_name).yaml</code>","text":"<p>As an example, let's look into the <code>courses/french-from-english/basics/skills/hello.yaml</code> file, which looks like this:</p> <pre><code>Skill:\n  Id: 33bfee7d-de74-4362-bf15-ce165add2dc8\n  Name: Hello\n  Thumbnails:\n    - people1\n    - woman1\n    - man1\n\nNew words:\n  - Word: l'homme\n    Translation: the man\n    Images:\n      - man1\n      - man2\n      - man3\n\n  - Word: la femme\n    Synonyms:\n      - la dame\n    Translation: the woman\n    Also accepted:\n      - the female\n\nPhrases:\n  - Phrase: La femme dit bonjour\n    Alternative versions:\n      - la femme dit salut\n    Translation: The woman says hello\n    Alternative translations:\n      - The woman says hi\n\n  - Phrase: L'homme dit bonjour\n    Alternative versions:\n      - L'homme dit salut\n    Translation: The man says hello\n    Alternative translations:\n      - The man says hi\n\nMini-dictionary:\n  French:\n    - dit: says\n    - bonjour:\n        - hello\n        - hi\n    - L'homme: the man\n\n  English:\n    - says: dit\n    - hello:\n        - bonjour\n        - salut\n\nTwo-way-dictionary:\n  - hello: bonjour\n  - hello: salut\n  - says: dit\n  - the man: L'homme\n</code></pre>"},{"location":"courses/skill.html#data-breakdown","title":"Data breakdown","text":"<p><code>Skill</code> has information about the skill.</p> <ul> <li><code>Skill &gt; Name</code>: The human-friendly name of the skill.</li> <li><code>Skill &gt; Id</code>: The ID of the course. NOTE: This should be unchanged if you're translating or editing an existing course. Only if you're creating a new course should this have a unique UUID v4 string. Details for which you can find here.</li> <li><code>Skill &gt; Thumbnails</code>: A list of filenames of the thumbnails to be used on the course page to give an idea of the skill. A list of available files can be found on <code>apps/web/static/images/</code>. The names should be used without extension and without <code>_tiny</code> or <code>_tinier</code> parts, e.g., <code>banana2_tinier.jpg</code> should be written as <code>banana2</code>.</li> </ul> <p><code>New words</code> has a list of new words that the lesson teaches.</p> <ul> <li><code>Word</code>: The word in the target language, i.e., the language the user is learning.</li> <li><code>Synonyms</code>: A list of synonyms of the above word. (optional)</li> <li><code>Translation</code>: Translation of the word in the source language, i.e., the language the user already knows.</li> <li><code>Also accepted</code>: A list of alternative translations to the source language, which will not be taught but will be accepted as correct translations of the <code>Word</code> field if supplied by the user. Currently has no effect, but may be used by future challenge types. (optional)</li> <li><code>Images</code>: A list of images for the word that is defined under <code>Word</code> or <code>Translation</code> above. The image names have to be without extension and without <code>_tiny</code> or <code>_tinier</code> parts.</li> </ul> <p><code>Phrases</code> has a list of sentences or phrases that the lesson teaches.</p> <ul> <li><code>Phrase</code>: The phrase in the target language.</li> <li><code>Alternative versions</code>: A list of alternative versions of the phrase in the target language. These will not be taught but will be accepted as correct translations of the <code>Translation</code> field if supplied by the user. (optional)</li> <li><code>Translation</code>: Translation of the phrase to the source language.</li> <li><code>Alternative translations</code>: A list of alternative translations to the source language, which will not be taught but will be accepted as correct translations of the <code>Phrase</code> field if supplied by the user. (optional)</li> </ul> <p><code>Mini-dictionary</code> has a list of terms and meanings the user can view as a sort of \"hint\" if they are stuck. Entries are accessed by mousing over terms in an exercise, which brings up a tooltip with the corresponding term(s) in the other language. An entry is required for every term used in a skill.</p> <p>Note that all <code>New words</code> are automatically added to the <code>Mini-dictionary</code>, in both translation directions, using the <code>Word</code> and <code>Translation</code> fields (<code>Synonyms</code> and <code>Also accepted</code> are ignored).</p> <p><code>Mini-dictionary</code> entries do not only apply to this skill; the meanings will apply course-wide and be merged with the same term in other skills, if applicable. This means that entries can be omitted when they are already present in other skills.</p> <p><code>Mini-dictionary</code> entries can define a term that spans multiple words, for example, a phrase like \"post office\". For this to work, \"post office\" will need to be enclosed in curly braces -- <code>{post office}</code> -- wherever it appears in the skill. (Due to YAML, strings containing braces will need to be quoted.)</p> <ul> <li><code>&lt;destination language&gt;</code>: A list of terms in the destination language as key and meaning in the target audience's language.</li> <li><code>&lt;target audience's language&gt;</code>: A list of terms in the target audience's language as key and meaning in the destination language.</li> </ul> <p><code>Two-way-dictionary</code> has a list of terms translating from the source language to the target language. This is a newer form of the <code>Mini-dictionary</code> in which we only need to write down pairs of words once, and they will be included in the dictionary in both directions. Unlike the Mini-dictionary, here each word has exactly one translation (so no list), but the same word can appear multiple times.</p> <pre><code>Two-way-dictionary:\n  - eat: como\n  - eat: comer\n</code></pre> <p>Is the same as:</p> <pre><code>Mini-dictionary:\n  English:\n    - eat:\n      - como\n      - comer\n  Spanish:\n    - como: eat\n    - comer: eat\n</code></pre> <p>The Two-way-dictionary also disregards any parentheses on the original side but includes them on the translation side:</p> <pre><code>Two-way-dictionary:\n  - (I) eat: (yo) como\n</code></pre> <p>Is the same as writing</p> <pre><code>Mini-dictionary:\n  English:\n    - eat: (yo) como\n  Spanish\n    - como: (I) eat\n</code></pre>"},{"location":"courses/skill.html#how-skills-are-taught-to-the-user","title":"How skills are taught to the user","text":"<p>As the course author, you have to specify the words and phrases you want to teach. LibreLingo will know how to present skills as a series of individual questions and tasks -- LibreLingo calls these \"challenges.\" It is useful to understand what challenges will be generated.</p> <p>For each vocabulary word (that is, each <code>New words</code> entry) in a skill, LibreLingo generates:</p> <ul> <li>A cards challenge -- multiple-choice translation from the source language to the target language, with a visual clue</li> <li>A short input challenge -- free-form translation from the source language to the target language</li> <li>A listening challenge -- transcription from target language audio to the target language text</li> </ul> <p>For each phrase in a skill, LibreLingo generates:</p> <ul> <li>An options challenge -- multiple-choice translation from target language to source language</li> <li>Two chips challenges -- translation using provided words, one in each translation direction, unless the phrase is one word</li> <li>A listening challenge -- transcription from target language audio to the target language text</li> </ul> <p></p>"},{"location":"courses/skill.html#creating-new-skills","title":"Creating new skills","text":"<p>Creating new skills is a matter of creating their corresponding YAML file. That being said, there are a couple of things to keep in mind:</p> <ul> <li>Skill yaml file should be inside a module's <code>skills</code> directory.</li> <li>Skills should have a unique <code>Id</code>. Such identifiers can be generated using   this website.</li> <li>Before skills will actually show up in the web app, they need to be added to   a <code>module.yaml</code>.</li> </ul> <p></p>"},{"location":"courses/skill.html#examples-of-editing-a-skill","title":"Examples of editing a skill","text":"<p>This is how you'd add a new alternative version to the phrase \"La femme dit bonjour\":</p> <pre><code>Phrases:\n  - Phrase: La femme dit bonjour\n    Alternative versions:\n      - La femme dit salut\n+     - La madame dit salut\n    Translation: The woman says hello\n    Alternative translations:\n      - The woman says hi\n</code></pre> <p>Keep in mind that when you add a new phrase or a new version or translation to a phrase, it's not automatically updating to the mini-dictionary. So you need to add any new words there:</p> <pre><code>Mini-dictionary:\n  French:\n    - dit: says\n+   - madame: lady\n    - bonjour:\n      - hello\n      - hi\n    - L'homme: the man\n</code></pre> <p>Also, note that the new words from each phrase listed under the <code>Phrases</code> key need to be added for both the source and the target language in the <code>Mini-dictionary</code>. For example:</p> <pre><code>Mini-dictionary:\n  French:\n    - dit: says\n    - bonjour:\n        - hello\n        - hi\n---\nEnglish:\n  - says: dit\n  - hello:\n      - bonjour\n      - salut\n</code></pre> <p></p>"},{"location":"courses/skill.html#tips-for-creating-good-skills","title":"Tips for creating good skills","text":"<ul> <li>When it comes to teaching grammar, your main tool is to teach by example.</li> <li>Use words to teach nouns that can be demonstrated easily with pictures, such as \"dog\", \"car\", \"tree\", and \"city\".</li> <li>Do not try to teach verbs, adjectives, etc., using words. Instead, use them in phrases.</li> </ul>"},{"location":"courses/skill.html#skill_namemd","title":"<code>(skill_name).md</code>","text":"<p>In order to create an introduction page for your skill, you need to create a Markdown file with the same name as your .yaml file but with the .md extension.</p> <p>Place this .md file next to the .yaml file in your skills folder like so</p> <pre><code>courses/spanish-from-english/basics/skills\n\u251c\u2500\u2500 animals.md\n\u251c\u2500\u2500 animals.yaml\n\u251c\u2500\u2500 clothes.yaml\n\u251c\u2500\u2500 food.yaml\n\u251c\u2500\u2500 nature.yaml\n\u251c\u2500\u2500 plurals.yaml\n\u251c\u2500\u2500 professions.yaml\n\u251c\u2500\u2500 verb_plurals.yaml\n\u2514\u2500\u2500 verbs.yaml\n</code></pre> <p>You can use this Markdown file to create a short article about the skill the user is about to learn or practice. This can be useful for explaining grammatical concepts, gotchas, and learning tips about the specific skill.</p>"}]}